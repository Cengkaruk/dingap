<?php

///////////////////////////////////////////////////////////////////////////////
// P H P U N I T
///////////////////////////////////////////////////////////////////////////////

require_once 'PHPUnit/Framework.php';

///////////////////////////////////////////////////////////////////////////////
// B O O T S T R A P
///////////////////////////////////////////////////////////////////////////////

$bootstrap = isset($_ENV['CLEAROS_BOOTSTRAP']) ? $_ENV['CLEAROS_BOOTSTRAP'] : '/usr/clearos/framework/shared';
require_once($bootstrap . '/bootstrap.php');

clearos_load_library('network/Network');

///////////////////////////////////////////////////////////////////////////////
// T E S T
///////////////////////////////////////////////////////////////////////////////

/**
 * Test class for Network.
 * Generated by PHPUnit on 2010-11-01 at 23:41:46.
 */
class NetworkTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Network
     * @access protected
     */
    protected $network;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->network = new Network;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
		unset($this->network);
    }

    /**
     * testGetNetmask().
     */
    public function testGetNetmask() {
		$result = $this->network->GetNetmask('24');
		$expected = '255.255.255.0';
		$this->assertTrue($result == $expected);
    }

    public function testGetNetmaskEmptyPrefix() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetNetmask('');
    }

    public function testGetNetmaskInvalidCharacters() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetNetmask('<');
    }

    public function testGetNetmaskInvalidLowerRange() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetNetmask(-1);
    }

    public function testGetNetmaskInvalidUpperRange() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetNetmask(33);
    }

    /**
     * testGetPrefix().
     */
    public function testGetPrefix() {
		$result = $this->network->GetPrefix('255.255.255.0');
		$expected = '24';
		$this->assertTrue($result == $expected);
	}

    public function testGetPrefixEmptyNetmask() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetPrefix('');
    }

    public function testGetPrefixInvalidNetmaskRange() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetPrefix('999.999.999.999');
    }

    public function testGetPrefixInvalidNetmaskCharacters() {
		$this->setExpectedException('ValidationException');
		$result = $this->network->GetPrefix('<');
    }

    /**
     * @todo Implement testGetNetworkAddress().
     */
    public function testGetNetworkAddress() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetBroadcastAddress().
     */
    public function testGetBroadcastAddress() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsPrivateIp().
     */
    public function testIsPrivateIp() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * testIsValidHostnameAlias().
     */
    public function testIsValidHostnameAlias() {
		$result = $this->network->IsValidHostnameAlias('clearosbox');
		$expected = '';
		$this->assertTrue($result == $expected);
    }

    public function testIsValidHostnameAliasDotFailure() {
		$result = $this->network->IsValidHostnameAlias('clearosbox.no#@#$#@dots');
		$expected = '';
		$this->assertTrue($result == $expected);
	}

    /**
     * @todo Implement testIsValidHostname().
     */
    public function testIsValidHostname() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidDomain().
     */
    public function testIsValidDomain() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * testIsValidIp().
     */
    public function testIsValidIp() {
		$result = $this->network->IsValidIp('1.2.3.4');
		$expected = '';
		$this->assertTrue($result == $expected);
    }

    /**
     * @todo Implement testIsValidIpOnNetwork().
     */
    public function testIsValidIpOnNetwork() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidMac().
     */
    public function testIsValidMac() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidIpRange().
     */
    public function testIsValidIpRange() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidNetmask().
     */
    public function testIsValidNetmask() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidNetwork().
     */
    public function testIsValidNetwork() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidPort().
     */
    public function testIsValidPort() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidPortRange().
     */
    public function testIsValidPortRange() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidPrefix().
     */
    public function testIsValidPrefix() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsValidProtocol().
     */
    public function testIsValidProtocol() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsLocalIp().
     */
    public function testIsLocalIp() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
