-- ClearOS EZIO-300 LCD Panel Configuration
-- Copyright (C) 2010 ClearFoundation
--
-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

-- Global "idle" text table
idle_text = {}

-- Global file-system types to check
fs_type = { "ext2", "ext3", "vfat" }

-- Global load average threshold
loadavg_threshold = 1.0

-- Global memory usage threshold
mem_threshold = 80

-- Global disk usage threshold
fs_threshold = 80

-- Global temperature threshold (in C)
temp_threshold = 70

-- Global dynamic dns update interval
dyndns_interval = 3600

-- TODO: ClearBOX model; this must be determined dynamically.
clearbox_model = 300

-- Last load average, used to change the up/down icon.
last_loadavg = 0.0

-- Last memory usage
last_mem_used = 0

-- External URL
external_url = nil

-- Last dynamic dns info update
last_dyndns_update = 0

-- Firewall configuration modification time
fw_mtime = 0

-- Global firewall variables
fw_mode = ""
fw_lanif = {}
fw_wanif = {}
fw_webconfig_open = false

-- Main menu choices
menu = {}
menu[1] = "Bypass"
--menu[2] = "Network"
menu[2] = "Reboot"
menu[3] = "Halt"

-- Return OS release and version from /etc/release
function get_release()
	local f
	local name
	local version
	local release = "Unknown OS"
	f = io.open("/etc/release")
	if f ~= nil then
		for line in f:lines() do
			-- ClearOS Enterprise Edition release 5.1
			_, _, name, version = string.find(line,
				"^(%w+)%s+.*release%s+(%d+.%d+)")
			release = name .. " " .. version
			break
		end
		io.close(f)
	end
	return release
end

-- Convert space delimited words to table
function util_words_to_table(words)
	local i = 0
	local p = 0
	local l = 0
	local t = {}

	while true do
		i = string.find(words, " ", i + 1)
		if i ~= nil then l = i - 1
		else l = string.len(words) end
		table.insert(t, string.sub(words, p, l))
		if i == nil then break end
		p = i + 1
	end
	return t
end

-- Update global firewall configuration variables
function fw_update_variables()
	local f
	local match
	local mtime = getmtime("/etc/firewall")
	if mtime == nil or mtime <= fw_mtime then return end
	fw_mtime = mtime
	f = io.open("/etc/firewall")
	if f ~= nil then
		for line in f:lines() do
			-- MODE="..."
			_, _, match = string.find(line, "^MODE=\"*(%w+[^\"])\"*")
			if match ~= nil then
				fw_mode = match
			end
			-- LANIF="..."
			_, _, match = string.find(line, "^LANIF=\"*(.*[^\"])\"*")
			if match ~= nil then
				fw_lanif = util_words_to_table(match)
			end
			-- EXITIF="..."
			_, _, match = string.find(line, "^EXTIF=\"*(.*[^\"])\"*")
			if match ~= nil then
				fw_wanif = util_words_to_table(match)
			end
			-- 0x10000001|6||81|
			match = string.find(line, "^%s+.*0x10000001|6||81|")
			if match ~= nil then
				fw_webconfig_open = true
			end
		end
		io.close(f)
	end
end

-- Return external webconfig URL
function get_external_url()
	if time() - last_dyndns_update < dyndns_interval then
		return external_url
	end
	ip, lastupdate, domain = get_dyndnsinfo()
	if ip == nil then
		dyndns_interval = 300
		last_dyndns_update = time()
		return external_url
	end
	dyndns_interval = 3600
	last_dyndns_update = time()
	external_url = string.format("https://%s:81/", domain)
	return external_url
end

-- Return current load averages
function get_load_average()
	local f
	local one = 0.00
	local five = 0.00
	local fifteen = 0.00
	f = io.open("/proc/loadavg")
	if f ~= nil then
		for line in f:lines() do
			-- 0.05 0.03 0.00 1/79 9243
			_, _, one, five, fifteen = string.find(line,
				"^(%d+.%d+)%s+(%d+.%d+)%s+(%d+.%d+)")
			break
		end
		io.close(f)
	end
	return tonumber(one), tonumber(five), tonumber(fifteen)
end

-- Return total memory, free memory in kB, and percent used
function get_memory_usage()
	local f
	local total = nil
	local free = nil
	local percent = 0.0
	local match
	f = io.open("/proc/meminfo")
	if f ~= nil then
		for line in f:lines() do
			match = nil
			-- MemTotal:        2072516 kB
			-- MemFree:         1391796 kB
			_, _, match = string.find(line,
				"^MemTotal:%s+(%d+)")
			if match ~= nil then total = match end
			_, _, match = string.find(line,
				"^MemFree:%s+(%d+)")
			if match ~= nil then free = match end
			if total ~= nil and free ~= nil then break end
		end
		io.close(f)
	end
	if total == nil then total = 0 end
	if free == nil then free = 0 end
	if total ~= 0 and free ~= 0 then
		percent = (total - free) * 100 / total
	end
	return total, free, percent
end

-- Return file-system usage table
function get_disk_stats()
	local f
	local i
	local fst
	local pattern
	local device
	local mount
	local total
	local used
	local percent
	local stats = {}
	f = io.open("/proc/mounts")
	if f ~= nil then
		for line in f:lines() do
			for i = 1, #fs_type, 1 do
				-- /dev/root / ext3 rw,data=ordered 0 0
				pattern = string.format("^([%%w_/]+)%%s+([%%w_/]+)%%s+%s", fs_type[i])
				_, _, device, mount = string.find(line, pattern)
				if device ~= nil then
					total, used = statvfs(mount)
					if total ~= nil and used ~= nil then
						percent = used * 100 / total
						if percent < fs_threshold then break end
						stats[device] = { mount, percent }
					end
					break
				end
			end
		end
		io.close(f)
	end
	return stats
end

-- Return system uptime
function get_uptime()
	local f
	local u
	local seconds
	local days = 0
	local hours = 0
	local minutes = 0
	local plural = "s"
	local uptime = "Unknown"
	f = io.open("/proc/uptime")
	if f ~= nil then
		for line in f:lines() do
			-- 11247.05 19916.08
			_, _, u = string.find(line, "^(%w+)")
			seconds = tonumber(u)
			if seconds >= 86400 then
				days = math.floor(seconds / 86400)
				seconds = seconds - days * 86400
			end
			if seconds >= 3600 then
                hours = math.floor(seconds / 3600)
				seconds = seconds - hours * 3600
			end
			if seconds >= 60 then
				minutes = math.floor(seconds / 60)
				seconds = seconds - minutes * 60
			end
			if days == 1 then plural = "" end 
			uptime = string.format("%d day%s %d:%02d",
				days, plural, hours, minutes)
			break
		end
		io.close(f)
	end
	return uptime
end

-- Return current bypass mode
-- XXX: This routine may need to be "model aware".
function get_bypass_mode()
	local f
	local bp1 = 0
	local bp2 = 0
	f = io.open("/sys/bus/i2c/devices/0-0026/bypass0")
	if f ~= nil then
		for line in f:lines() do
			_, _, bp1 = string.find(line, "^(%d+)")
			break
		end
		io.close(f)
	end
	f = io.open("/sys/bus/i2c/devices/0-0022/bypass0")
	if f ~= nil then
		for line in f:lines() do
			_, _, bp2 = string.find(line, "^(%d+)")
			break
		end
		io.close(f)
	end
	return tonumber(bp1), tonumber(bp2)
end

-- Set bypass mode
-- XXX: This routine may need to be "model aware".
function set_bypass_mode(bp, mode)
	local f
	if bp == 1 then
		f = io.open("/sys/bus/i2c/devices/0-0026/bypass0", "w")
	elseif bp == 2 then
		f = io.open("/sys/bus/i2c/devices/0-0022/bypass0", "w")
	else
		return
	end
	if f ~= nil then
		f:write(string.format("%d\n", mode))
		io.close(f)
	end
end

-- Parse firewall mode from /etc/firewall
function parse_firewall_mode()
	if fw_mode == "standalone" or fw_mode == "trustedstandalone" then
		return "Standalone"
	elseif fw_mode == "gateway" or fw_mode == "trustedgateway" then
		return "Gateway"
	elseif fw_mode == "dmz" then
		return "DMZ"
	end
	return "Unknown"
end

-- Scroll second line of text specified number of times
function scroll_text(text, count)
	local i
	local j
	local delta = string.len(text) - 16
	local button = EZIO_BUTTON_NONE
	for i = 1, count, 1 do
		for j = 1, delta + 1, 1 do
			write_text_xy(0, 1, string.sub(text, j))
			button = read_button(300000)
			if button ~= EZIO_BUTTON_NONE or terminate() then
				return button
			end
		end
		button = read_button(1000000)
		for j = delta - 1, 1, -1 do
			write_text_xy(0, 1, string.sub(text, j))
			button = read_button(300000)
			if button ~= EZIO_BUTTON_NONE or terminate() then
				return button
			end
		end
		if i ~= count then button = read_button(1000000) end
	end
	return button
end

-- Idle text navigation loop
function nav_idle_text(i, button)
	local pause_icon = true

	while button ~= EZIO_BUTTON_NONE do
		button = read_button(250000)
	end
	while button ~= EZIO_BUTTON_ESC and
		button ~= EZIO_BUTTON_ENTER and
		terminate() == false do
		update_idle_text()
		write_text_xy(0, 0, idle_text[i])
		if pause_icon == true then
			write_text_xy(15, 0, '"')
		else
			write_text_xy(15, 0, ' ')
		end
		if idle_text[i + 1] ~= nil then
			write_text_xy(0, 1, idle_text[i + 1])
		end
		button = read_button(2000000)
		if button == EZIO_BUTTON_UP then
			if i == 1 then i = #idle_text - 1
			else i = i - 2 end
		elseif button == EZIO_BUTTON_DOWN then
			if i == #idle_text - 1 then i = 1
			else i = i + 2 end
		elseif button == EZIO_BUTTON_NONE then
			if pause_icon == true then
				pause_icon = false
			else
				pause_icon = true
			end
		end
	end
	return i
end

-- While not paused or in a menu, do this...
function while_idle()
	local i
	local button = EZIO_BUTTON_NONE
	while button ~= EZIO_BUTTON_ESC and
		terminate() == false do
		update_idle_text()
		for i = 1, #idle_text, 2 do
			button = EZIO_BUTTON_NONE
			if terminate() then break end
			clear()
			write_text_xy(0, 0, idle_text[i])
			if idle_text[i + 1] ~= nil then
				if string.len(idle_text[i + 1]) > 16 then
					button = scroll_text(idle_text[i + 1], 2)
				else
					write_text_xy(0, 1, idle_text[i + 1])
				end
			end
			if button == EZIO_BUTTON_NONE then
				button = read_button(3000000)
			end
			if button == EZIO_BUTTON_UP or
				button == EZIO_BUTTON_DOWN or
				button == EZIO_BUTTON_ENTER then
				i = nav_idle_text(i, button)
			elseif button == EZIO_BUTTON_ESC then break end
		end
	end
end

-- Update the idle text table
function update_idle_text()
	local i
	local release
	local one
	local five
	local fifteen
	local time
	local date
	local ipaddr
	local bp1
	local bp2
	local cpu
	local sys
	local mode
	local icon
	local total
	local free
	local mem_used
	local percent_mem_used
	local disk_stats
	local device
	local stats
	local mount
	local percent_disk_used
	local uptime
	local ifndx
	local external_ip
	local internal_ip

	idle_text = {}

	-- Possibly update firewall configuration variables
	fw_update_variables()

	-- OS release
	release = get_release()
	table.insert(idle_text, string.format("ClearBOX %-7d", clearbox_model))
	table.insert(idle_text, string.format("%16s", release))

	-- External URL
	if fw_webconfig_open and get_external_url() ~= nil then
		table.insert(idle_text, string.format("%-16s", "External URL"))
		table.insert(idle_text, external_url)
	end

	-- External IP
	if fw_webconfig_open and #fw_wanif then
		for i = 1, #fw_wanif, 1 do
			if #fw_wanif == 1 then ifndx = "" else
				ifndx = " " .. i
			end
			external_ip = getifaddr(fw_wanif[i])
			if external_ip ~= nil then
				table.insert(idle_text, string.format("%-16s", "External IP" .. ifndx))
				table.insert(idle_text, string.format("https://%s:81/", external_ip))
			end
		end
	end

	-- Internal IP
	if #fw_lanif then
		for i = 1, #fw_lanif, 1 do
			if #fw_lanif == 1 then ifndx = "" else
				ifndx = " " .. i
			end
			internal_ip = getifaddr(fw_lanif[i])
			if internal_ip ~= nil then
				table.insert(idle_text, string.format("%-16s", "Internal IP" .. ifndx))
				table.insert(idle_text, string.format("https://%s:81/", internal_ip))
			end
		end
	end

	-- Time and date
	-- XXX: Removed as this isn't in the specification
	--time, date = localtime()
	--table.insert(idle_text, string.format("%-16s", "Time"))
	--table.insert(idle_text, string.format("%16s", time))

	--table.insert(idle_text, string.format("%-16s", "Date"))
	--table.insert(idle_text, string.format("%16s", date))

	-- Load average (5 minute) with sexy up/down icon
	one, five, fifteen = get_load_average()
	if five >= loadavg_threshold then
		if five == last_loadavg then
			icon = 0x20
		elseif five > last_loadavg then
			icon = 0x02
		else
			icon = 0x03
		end
		table.insert(idle_text, string.format("%-16s", "Load Average"))
		table.insert(idle_text, string.format("%15.2f%c", five, icon))
	end
	last_loadavg = five

	-- Memory usage
	total, free, percent_mem_used = get_memory_usage()
	if percent_mem_used >= mem_threshold then
		mem_used = (total - free) / 1024
		if mem_used == last_mem_used then
			icon = 0x20
		elseif mem_used > last_mem_used then
			icon = 0x02
		else
			icon = 0x03
		end
		table.insert(idle_text, string.format("%-16s", "Memory Usage"))
		table.insert(idle_text, string.format("%3d%% %7d MB%c",
			percent_mem_used, mem_used, icon))
	end
	last_mem_used = mem_used

	-- Disk usage
	disk_stats = get_disk_stats()
	for device, stats in pairs(disk_stats) do
		mount = stats[1]
		percent_disk_used = stats[2]
		if mount == '/' then mount = "rootfs" end
		table.insert(idle_text, string.format("%-16s", "Disk Usage"))
		table.insert(idle_text,
			string.format("%11s %3d%%", mount, percent_disk_used))
	end

	-- CPU and system temperature
	cpu = get_sensor(61)
	sys = get_sensor(62)
	if cpu >= temp_threshold or sys >= temp_threshold then
		table.insert(idle_text, string.format("Temperature %cC  ", 1))
		table.insert(idle_text, string.format(" CPU %3.0f SYS %3.0f", cpu, sys))
	end

	-- Display uptime
	uptime = get_uptime()
	table.insert(idle_text, string.format("%-16s", "Uptime"))
	table.insert(idle_text, string.format("%16s", uptime))

	-- Firewall mode
	-- XXX: Removed as this isn't in the specification
	--mode = parse_firewall_mode()
	--table.insert(idle_text, string.format("%-16s", "Firewall Mode"))
	--table.insert(idle_text, string.format("%16s", mode))

	-- Ethernet ports
	-- XXX: Removed as this isn't in the specification
	--for i = 0, 7, 1 do
	--	if getifup(string.format("eth%d", i)) ~= false then
	--		ipaddr = getifaddr(string.format("eth%d", i))
	--		if ipaddr == nil then ipaddr = "0.0.0.0" end
	--		table.insert(idle_text, string.format("Network Port E%d ", i))
	--		table.insert(idle_text, string.format("%16s", ipaddr))
	--	end
	--end

	-- Bypass mode
	-- XXX: Removed as this isn't in the specification
	--bp1, bp2 = get_bypass_mode()
	--if bp1 == 0 then bp1 = "--"
	--elseif bp1 == 1 then bp1 = "  "
	--elseif bp1 == 2 then bp1 = "On" end
	--if bp2 == 0 then bp2 = "--"
	--elseif bp2 == 1 then bp2 = "  "
	--elseif bp2 == 2 then bp2 = "On" end
	--table.insert(idle_text, string.format("%-16s", "Network Bypass"))
	--table.insert(idle_text,
	--	string.format(" B/P1 %2s B/P2 %2s", bp1, bp2))
end

-- Main loop starts here
while true do
	while_idle()
	if terminate() then break end
	choice = read_choice(string.format("ClearBOX %-7d", clearbox_model), menu)
	if choice == 1 then
		choices = { "Set Bypass 1", "Set Bypass 2" }
		choice = read_choice("System", choices)
		if choice == 1 then
			choices = { "Normal", "Open", "Bypass" }
			choice = read_choice("Set Bypass 1", choices)
			if choice ~= -1 then
				choice = choice - 1
				set_bypass_mode(1, choice)
			end
		elseif choice == 2 then
			choices = { "Normal", "Open", "Bypass" }
			choice = read_choice("Set Bypass 2", choices)
			if choice ~= -1 then
				choice = choice - 1
				set_bypass_mode(2, choice)
			end
		end
	elseif choice == 2 or choice == 3 then
		choices = { "No", "Yes" }
		confirm = read_choice("Are you sure?", choices)
		if confirm == 2 then
			if choice == 2 then
				execute("/sbin/reboot")
				break
			else
				execute("/sbin/halt")
				break
			end
		end
	end
end

-- Have a nice day ;)
clear()
write_text_xy(0, 0, "**")

-- vi: ts=4 syntax=lua
