#!/usr/webconfig/bin/php
<?php

///////////////////////////////////////////////////////////////////////////////
//
// Copyright 2008 Point Clark Networks.
//
///////////////////////////////////////////////////////////////////////////////
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
///////////////////////////////////////////////////////////////////////////////

$BASEDIR = isset($_ENV['WEBCONFIG_ROOT']) ? $_ENV['WEBCONFIG_ROOT'] : "/var/webconfig";

require_once($BASEDIR . '/api/ClearDirectory.class.php');
require_once($BASEDIR . '/api/Ldap.class.php');
require_once($BASEDIR . '/api/Network.class.php');
require_once($BASEDIR . '/api/Organization.class.php');
require_once($BASEDIR . '/common/Logger.class.php');

// Command line options
//--------------------------------------------------------------------

$roles = array(
	ClearDirectory::MODE_STANDALONE,
	ClearDirectory::MODE_MASTER,
	ClearDirectory::MODE_REPLICATE
);

$shortopts  = "";
$shortopts .= "d:"; // Domain
$shortopts .= "p:"; // Password
$shortopts .= "r:"; // Role
$shortopts .= "m:"; // Master hostname
$shortopts .= "f";  // Force
$shortopts .= "h";  // Help

$helpopts  = "";
$helpopts .= "  -d: domain (e.g. example.com)\n";
$helpopts .= "  -f: force initialization\n";
$helpopts .= "  -m: master hostname\n";
$helpopts .= "  -p: password\n";
$helpopts .= "  -r: LDAP role ('standalone' ,'master' or 'replicate')\n";
$helpopts .= "\n";
$helpopts .= "  -h: help\n";

$options = getopt($shortopts);

// Handle command line options
//--------------------------------------------------------------------

$force = isset($options['f']) ? true : false;
$help = isset($options['h']) ? true : false;
$role = isset($options['r']) ? $options['r'] : "";
$domain = isset($options['d']) ? $options['d'] : "";
$password = isset($options['p']) ? $options['p'] : "";
$master_hostname = isset($options['m']) ? $options['m'] : "";

// Usage issues
//--------------------------------------------------------------------

$network = new Network();
$directory = new ClearDirectory();

if ($help) {
	echo "usage: " . $argv[0] . " [options]\n";
	echo $helpopts;
	exit(0);
}

try {
	if (!$force && $directory->IsInitialized()) {
		echo "LDAP is already initialized, use -f to force\n";
		exit(0);
	}
} catch (Exception $e) {
	echo "error: " . $e->GetMessage() . "\n";
}

// Handle command line options
//--------------------------------------------------------------------

while (! $directory->IsValidMode($role)) {
	echo "What is the role of this server (" . implode(", " ,$roles) . ")?: ";
	$role = trim(fgets(STDIN));
}

while (! $network->IsValidDomain($domain)) {
	echo "What is your domain (e.g. example.com)?: ";
	$domain = trim(fgets(STDIN));
}

if ($role == ClearDirectory::MODE_REPLICATE) {
	while (! $network->IsValidHostname($master_hostname)) {
		echo "What is the hostname of the master LDAP server?: ";
		$master_hostname = trim(fgets(STDIN));
	}
}

while (! $directory->IsValidPassword($password)) {
	ttyecho(false); // Disable echo to terminal
	$message = ($role == ClearDirectory::MODE_REPLICATE) ? "Specify the master LDAP password?: " : "Select a password for your LDAP system: ";
	echo $message;
	$password = trim(fgets(STDIN));
	ttyecho(true); // Re-enable echo to terminal
}

echo "The following settings will be used to set up LDAP\n\n";
echo "Role:     $role\n";
if ($role == ClearDirectory::MODE_REPLICATE)
	echo "Master:   $master_hostname\n";
echo "Domain:   $domain\n";
echo "Password: " . str_repeat("*", strlen($password)) . "\n";
echo "\n";

// Initialize LDAP
//--------------------------------------------------------------------

try {
	// Shutdown Samba or it will try to write information to LDAP
	if (file_exists($BASEDIR . '/api/Samba.class.php')) {
		require_once($BASEDIR . '/api/Samba.class.php');
		$samba = new Samba();
		if ($samba->IsInstalled())
			$samba->SetRunningState(false);
	}
} catch (Exception $e) {
	echo "warning: " . $e->GetMessage() . "\n";
}

try {
	$ldap = new Ldap();
	$organization = new Organization();

	if ($role == ClearDirectory::MODE_STANDALONE) {
		$directory->Initialize($role, $domain, $password, false, true, $force);
		$organization->SetDomain($domain);
		$ldap->SetBindPolicy(Ldap::CONSTANT_LOCALHOST);
	} else if ($role == ClearDirectory::MODE_MASTER) {
		$directory->Initialize($role, $domain, $password, false, true, $force);
		$organization->SetDomain($domain);
		$ldap->SetBindPolicy(Ldap::CONSTANT_LAN);
	} else if ($role == ClearDirectory::MODE_REPLICATE) {
		$directory->Initialize($role, $domain, $password, false, true, $force, $master_hostname);
		$organization->SetDomain($domain);
		$ldap->SetBindPolicy(Ldap::CONSTANT_LOCALHOST);
	} else {
		echo "LDAP role is not supported: " . $role . "\n";
		exit(1);
	}

	// Initialize Samba elements in LDAP
	if (file_exists($BASEDIR . '/api/Samba.class.php')) {
		require_once($BASEDIR . '/api/Samba.class.php');
		if (!$samba->IsDirectoryInitialized()) {
			$workgroup = $samba->GetWorkgroup();
			$samba->InitializeDirectory($workgroup);
		}
	}
} catch (Exception $e) {
	echo "error: " . $e->GetMessage() . "\n";
}


///////////////////////////////////////////////////////////////////////////////
// Function to read a password from standard in without echoing password
///////////////////////////////////////////////////////////////////////////////

function ttyecho($on)
{
	global $ttyecho;

	if ($on) {
		if (isset($ttyecho))
			exec("stty $ttyecho");
	} else {
		$ttyecho = exec("stty -g");
		exec("stty -echo");
	}
}

// vim: syntax=php ts=4
?>
