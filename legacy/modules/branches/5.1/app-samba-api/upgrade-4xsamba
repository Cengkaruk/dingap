#!/usr/webconfig/bin/php
<?php

///////////////////////////////////////////////////////////////////////////////
//
// Copyright 2009 Point Clark Networks.
//
///////////////////////////////////////////////////////////////////////////////
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
///////////////////////////////////////////////////////////////////////////////

$BASEDIR = isset($_ENV['WEBCONFIG_ROOT']) ? $_ENV['WEBCONFIG_ROOT'] : "/var/webconfig";

require_once($BASEDIR . "/common/Logger.class.php");
require_once($BASEDIR . "/api/ClearDirectory.class.php");
require_once($BASEDIR . "/api/Samba.class.php");
require_once($BASEDIR . "/api/File.class.php");
require_once($BASEDIR . "/api/ShellExec.class.php");
require_once($BASEDIR . "/api/Ldap.class.php");

try {
	$smbpasswd = new File("/etc/samba/smbpasswd", true);
	$upgrade4x = new File("/etc/system/pre5x");

	if (!$upgrade4x->Exists() || !$smbpasswd->Exists())
		exit(0);

	$ldap = new Ldap();

	if ($ldap->GetRunningState()) {
		$samba = new Samba();
		$sambadomain = $samba->GetWorkgroup();

		if ($samba->IsDirectoryInitialized())
			$samba->SetWorkgroup($sambadomain);
		else
			$samba->InitializeDirectory($sambadomain);

		if (! $samba->IsLocalSystemInitialized()) {
			$directory = new ClearDirectory();
			$password = $directory->GeneratePassword();
			$netbiosname = $samba->GetNetbiosName();

			// We do a default initialization with the old data and a random password.
			// This will make the system happier on boot. However, we really want the 
			// user to explicitly re-initialize in Webconfig, so we set the
			// SetLocalSystemInitialized to false.

			$samba->InitializeLocalSystem($netbiosname, $sambadomain, $password);
			$samba->SetLocalSystemInitialized(false);
		}

		$shell = new ShellExec();
		$shell->Execute("/usr/bin/pdbedit", "-i smbpasswd:/etc/samba/smbpasswd -e ldapsam");
		$smbpasswd->MoveTo("/usr/share/system/modules/samba/smbpasswd.old");

	} else {
		LogIt("skipping upgrade on dormant LDAP");
	}
} catch (Exception $e) {
	LogIt($e->GetMessage());
}

function LogIt($logmessage)
{
	Logger::Syslog("upgrade-4xsamba", $logmessage);
	echo "$logmessage\n";
}

?>
